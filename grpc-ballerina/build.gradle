/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - gRPC Ballerina Generator'

configurations {
    jbalTools
    externalJars
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':grpc-native')

    externalJars (group: 'org.ballerinalang', name: 'http-native', version: "${stdlibHttpVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-common', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-buffer', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-transport', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-resolver', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-handler', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-codec-http', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-codec', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-handler-proxy', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-codec-http2', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars (group: 'commons-pool.wso2', name: 'commons-pool', version: "${wso2CommonsPoolVersion}") {
        transitive = false
    }
    externalJars (group: 'org.wso2.orbit.org.yaml', name: 'snakeyaml', version: "${wso2SnakeYamlVersion}") {
        transitive = false
    }
    externalJars (group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    externalJars (group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    externalJars (group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: "${nettyTcnativeVersion}") {
        transitive = false
    }
    externalJars (group: 'com.google.protobuf', name: 'protobuf-java', version: "${protobufJavaVersion}") {
        transitive = false
    }
    externalJars (group: 'com.github.jknack', name: 'handlebars', version: "${jknackHandlebarsVersion}") {
        transitive = false
    }
    externalJars (group: 'info.picocli', name: 'picocli', version: "${picocliVersion}") {
        transitive = false
    }
    externalJars (group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: "${protoGoogleCommonsVersion}") {
        transitive = false
    }
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task copyToLib(type: Copy) {
    into "$project.projectDir/lib"
    from configurations.externalJars
}

task unpackJballerinaTools(type: Copy) {
    dependsOn(copyToLib)
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    dependsOn(unpackJballerinaTools)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def packageName = "grpc"
def packageOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
// external jar file which need to pack to distribution
def externalGoogleProtosCommonJar = file("$project.projectDir/lib/proto-google-common-protos-${protoGoogleCommonsVersion}.jar")
def targetNativeJar = file("$project.rootDir/${packageName}-native/build/libs/${packageName}-native-${project.version}.jar")
def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
def originalConfig = ballerinaConfigFile.text
def originalDependencyConfig = ballerinaDependencyFile.text

task updateTomlFile {
    doLast {
        def stdlibDependentRuntimeVersion = project.stdlibRuntimeVersion.split("-")[0]
        def stdlibDependentCryptoVersion = project.stdlibCryptoVersion.split("-")[0]
        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
        def stdlibDependentAuthVersion = project.stdlibOAuth2Version.split("-")[0]
        def stdlibDependentJwtVersion = project.stdlibJwtVersion.split("-")[0]
        def stdlibDependentOAuth2Version = project.stdlibOAuth2Version.split("-")[0]
        def stdlibDependentRegexVersion = project.stdlibRegexVersion.split("-")[0]
        def stdlibDependentNettyVersion = project.nettyVersion

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@http.native.version@", project.stdlibHttpVersion)
        newConfig = newConfig.replace("@netty.version@", stdlibDependentNettyVersion)
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.runtime.version@", stdlibDependentRuntimeVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibDependentCryptoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.auth.version@", stdlibDependentAuthVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.jwt.version@", stdlibDependentJwtVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.oauth2.version@", stdlibDependentOAuth2Version)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.regex.version@", stdlibDependentRegexVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencyConfig
    }
}

assemble {
    dependsOn(copyStdlibs)
    dependsOn(":grpc-native:build")
    dependsOn(":grpc-test-utils:build")
}

task ballerinaTest {
    dependsOn(assemble)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    def debugParams = ""
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }

    def balJavaDebugParam = ""
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }

    def privateKey = "tests/certsandkeys/private.key"
    def publicCert = "tests/certsandkeys/public.crt"
    def keyStore = "tests/certsandkeys/ballerinaKeystore.p12"
    def trustStore = "tests/certsandkeys/ballerinaTruststore.p12"
    def certsAndKeys = "--certificate.key=${privateKey} --public.cert=${publicCert} --keystore=${keyStore} --truststore=${trustStore}"

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test ${debugParams} ${certsAndKeys} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test ${debugParams} ${certsAndKeys}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
}

task ballerinaBuild {
    dependsOn(test)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat build --skip-tests -c && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal build --skip-tests -c"
            }
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/balo/${packageOrg}/${packageName}/${tomlVersion}")
        }

        copy {
            from file("$project.projectDir/target/cache")
            into file("$artifactCacheParent/cache/")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null && project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }

        }
//      Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }
        copy {
            from targetNativeJar
            into file("$artifactLibParent/libs")
        }
        copy {
            from externalGoogleProtosCommonJar
            into file("$artifactLibParent/libs")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

build {
    dependsOn(ballerinaBuild)
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-grpc")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}
